<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
                        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

  <!--  使用 mvc:annotation-driven 代替注解映射器和注解适配器配置 其默认加载了很多的参数绑定方法
    比如json转换解析器 jackjson就默认加载了-->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
    <!-- 先扫描controller 后service -->
    <context:component-scan base-package="com.idoc.swagger.controller">
       <!-- <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Service" />-->
    </context:component-scan>

    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->

    <bean id="multipartResolver"

          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

        <!-- 默认编码 -->

        <property name="defaultEncoding" value="utf-8" />

        <!-- 文件大小最大值 -->

        <property name="maxUploadSize" value="10485760000" />

        <!-- 内存中的最大值 -->

        <property name="maxInMemorySize" value="40960" />

    </bean>
    <!-- 使注解生效   -->
    <bean
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter" />
                <bean class = "org.springframework.http.converter.StringHttpMessageConverter">
                    <property name = "supportedMediaTypes">
                        <list>
                            <bean class="org.springframework.http.MediaType">
                                <constructor-arg index="0" value="text"/>
                                <constructor-arg index="1" value="plain"/>
                                <constructor-arg index="2" value="UTF-8"/>
                            </bean>
                            <bean class="org.springframework.http.MediaType">
                                <constructor-arg index="0" value="*"/>
                                <constructor-arg index="1" value="*"/>
                                <constructor-arg index="2" value="UTF-8"/>
                            </bean>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>
    <!--
        springmvc的配置文件，它的命名规则：web.xml里springmvc模块的名称+“-servlet.xml”
        对模型视图名称的解析，即在模型视图名称添加前后缀 例如：Controller里返回一个名为test的逻辑视图名称，根据配置文件，
        它最终找到的文件是/panges/test.jsp，即把前后缀拼装为一个路径。
        用来进行jsp解析，默认使用jstl标签,classpath下必须有jstl的包
    -->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--配置jsp路径的前缀-->
        <property name="prefix" value="/WEB-INF/pages/"></property>
        <!--配置jsp路径的后缀-->
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!-- jaskson 用于前后台以json形式的数据交换,设置编码集为utf-8编码-->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>


    <!-- SpringMVC 异常处理机制 -->
  <!--  <bean id="exceptionResolver"
          class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.Exception">common/error</prop>
                <prop key="java.lang.Throwable">common/error</prop>
            </props>
        </property>
        <property name="statusCodes">
            <props>
                <prop key="errors/500">500</prop>
                <prop key="errors/404">404</prop>
            </props>
        </property>
        &lt;!&ndash; 设置日志输出级别，不定义则默认不输出警告等错误日志信息 &ndash;&gt;
        <property name="warnLogCategory" value="WARN"></property>
        &lt;!&ndash; 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 &ndash;&gt;
        <property name="defaultErrorView" value="../error"></property>
        &lt;!&ndash; 默认HTTP状态码 &ndash;&gt;
        <property name="defaultStatusCode" value="500"></property>

    </bean>-->
    <!-- 访问静态资源文件  -->
    <!--<mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>-->
</beans>